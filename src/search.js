"use strict";
exports.__esModule = true;
var search_results_js_1 = require("./search-results.js");
var toggleFavoriteItem_js_1 = require("./toggleFavoriteItem.js");
var lib_js_1 = require("./lib.js");
function search(arr, func) {
    var mainTimeout = setTimeout(function () {
        (0, lib_js_1.renderToast)({ type: 'error', text: 'Обновите страницу для актуализации броней!', action: 'Обновить' });
    }, 300000);
    var city = arr[0], arrival = arr[1], depart = arr[2], maxPrice = arr[3];
    var likes = 0;
    var dateArr = arrival.getTime();
    var dateDep = depart.getTime();
    fetch("http://localhost:3030/places?coordinates=59.9386,30.3141&checkInDate=".concat(dateArr, "&checkOutDate=").concat(dateDep, "&maxPrice=").concat(Number(maxPrice)))
        .then(function (data) { return data.json(); })
        .then(function (data) {
        if (data.length === 0)
            return (0, search_results_js_1.renderEmptyOrErrorSearchBlock)('Результаты отсутствуют');
        (0, search_results_js_1.renderSearchResultsBlock)(data);
    })
        .then(function () {
        var likes = document.querySelectorAll('.favorites');
        likes.forEach(function (item) {
            item.addEventListener('click', function (e) {
                (0, toggleFavoriteItem_js_1.toggleFavoriteItem)(e);
            });
        });
        var booking = document.querySelectorAll('li.result');
        booking.forEach(function (i) {
            i.addEventListener('click', function (e) {
                // @ts-ignore
                fetch("http://localhost:3030/places/".concat(e.target.id, "?checkInDate=").concat(dateArr, "&checkOutDate=").concat(dateDep))
                    .then(function (data) { return data.json(); })
                    .then(function (data) {
                    clearTimeout(mainTimeout);
                    (0, lib_js_1.renderToast)({ type: 'success', text: "\u041E\u0442\u0435\u043B\u044C ".concat(data.name, " \u0437\u0430\u0431\u0440\u043E\u043D\u0438\u0440\u043E\u0432\u0430\u043D!") });
                })["catch"](function (err) { return console.log(err); });
            });
        });
    })["catch"](function (err) { return (0, search_results_js_1.renderEmptyOrErrorSearchBlock)(err); });
    var timeOut = setTimeout(function () {
        func('error', '[]');
        clearTimeout(timeOut);
    }, 1000);
}
exports["default"] = search;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2VhcmNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseURBQTRGO0FBQzVGLGlFQUEyRDtBQUMzRCxtQ0FBcUM7QUFFckMsU0FBd0IsTUFBTSxDQUFDLEdBQUcsRUFBQyxJQUFJO0lBQ25DLElBQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQztRQUMzQixJQUFBLG9CQUFXLEVBQUMsRUFBQyxJQUFJLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBQyw0Q0FBNEMsRUFBQyxNQUFNLEVBQUMsVUFBVSxFQUFDLENBQUMsQ0FBQTtJQUNwRyxDQUFDLEVBQUMsTUFBTSxDQUFDLENBQUE7SUFDSixJQUFBLElBQUksR0FBNEIsR0FBRyxHQUEvQixFQUFDLE9BQU8sR0FBb0IsR0FBRyxHQUF2QixFQUFDLE1BQU0sR0FBYSxHQUFHLEdBQWhCLEVBQUMsUUFBUSxHQUFJLEdBQUcsR0FBUCxDQUFRO0lBQ3pDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQTtJQUNiLElBQUksT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNoQyxJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDL0IsS0FBSyxDQUFDLCtFQUF3RSxPQUFPLDJCQUFpQixPQUFPLHVCQUFhLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBRSxDQUFDO1NBQ3hJLElBQUksQ0FBQyxVQUFBLElBQUksSUFBRSxPQUFBLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBWCxDQUFXLENBQUM7U0FDdkIsSUFBSSxDQUFDLFVBQUEsSUFBSTtRQUNOLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDO1lBQ2pCLE9BQU8sSUFBQSxpREFBNkIsRUFBQyx3QkFBd0IsQ0FBQyxDQUFBO1FBQ2xFLElBQUEsNENBQXdCLEVBQUMsSUFBSSxDQUFDLENBQUE7SUFDbEMsQ0FBQyxDQUFDO1NBQ0QsSUFBSSxDQUFDO1FBQ0YsSUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3RELEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJO1lBQ2QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBQyxVQUFDLENBQUM7Z0JBQzVCLElBQUEsMENBQWtCLEVBQUMsQ0FBQyxDQUFDLENBQUE7WUFDekIsQ0FBQyxDQUFDLENBQUE7UUFDTixDQUFDLENBQUMsQ0FBQTtRQUNGLElBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN2RCxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQztZQUNiLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUMsVUFBQyxDQUFDO2dCQUN6QixhQUFhO2dCQUNiLEtBQUssQ0FBQyx1Q0FBZ0MsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLDBCQUFnQixPQUFPLDJCQUFpQixPQUFPLENBQUUsQ0FBQztxQkFDOUYsSUFBSSxDQUFDLFVBQUEsSUFBSSxJQUFFLE9BQUEsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFYLENBQVcsQ0FBQztxQkFDdkIsSUFBSSxDQUFDLFVBQUEsSUFBSTtvQkFDTixZQUFZLENBQUMsV0FBVyxDQUFDLENBQUE7b0JBQ3pCLElBQUEsb0JBQVcsRUFBQyxFQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLHlDQUFTLElBQUksQ0FBQyxJQUFJLCtFQUFnQixFQUFDLENBQUMsQ0FBQTtnQkFDNUUsQ0FBQyxDQUFDLENBQ0QsT0FBSyxDQUFBLENBQUMsVUFBQSxHQUFHLElBQUUsT0FBQSxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFoQixDQUFnQixDQUFDLENBQUE7WUFDckMsQ0FBQyxDQUFDLENBQUE7UUFDTixDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUMsQ0FBQyxDQUNELE9BQUssQ0FBQSxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsSUFBQSxpREFBNkIsRUFBQyxHQUFHLENBQUMsRUFBbEMsQ0FBa0MsQ0FBQyxDQUFBO0lBQ3JELElBQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQztRQUNuQixJQUFJLENBQUMsT0FBTyxFQUFDLElBQUksQ0FBQyxDQUFBO1FBQ3RCLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMxQixDQUFDLEVBQUMsSUFBSSxDQUFDLENBQUE7QUFDWCxDQUFDO0FBekNELDRCQXlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7cmVuZGVyRW1wdHlPckVycm9yU2VhcmNoQmxvY2ssIHJlbmRlclNlYXJjaFJlc3VsdHNCbG9ja30gZnJvbSBcIi4vc2VhcmNoLXJlc3VsdHMuanNcIjtcbmltcG9ydCB7dG9nZ2xlRmF2b3JpdGVJdGVtfSBmcm9tIFwiLi90b2dnbGVGYXZvcml0ZUl0ZW0uanNcIjtcbmltcG9ydCB7cmVuZGVyVG9hc3R9IGZyb20gXCIuL2xpYi5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZWFyY2goYXJyLGZ1bmMpIHtcbiAgICBjb25zdCBtYWluVGltZW91dCA9IHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgcmVuZGVyVG9hc3Qoe3R5cGU6J2Vycm9yJywgdGV4dDon0J7QsdC90L7QstC40YLQtSDRgdGC0YDQsNC90LjRhtGDINC00LvRjyDQsNC60YLRg9Cw0LvQuNC30LDRhtC40Lgg0LHRgNC+0L3QtdC5IScsYWN0aW9uOifQntCx0L3QvtCy0LjRgtGMJ30pXG4gICAgfSwzMDAwMDApXG4gICAgbGV0IFtjaXR5LGFycml2YWwsZGVwYXJ0LG1heFByaWNlXSA9IGFycjtcbiAgICBsZXQgbGlrZXMgPSAwXG4gICAgbGV0IGRhdGVBcnIgPSBhcnJpdmFsLmdldFRpbWUoKTtcbiAgICBsZXQgZGF0ZURlcCA9IGRlcGFydC5nZXRUaW1lKCk7XG4gICAgZmV0Y2goYGh0dHA6Ly9sb2NhbGhvc3Q6MzAzMC9wbGFjZXM/Y29vcmRpbmF0ZXM9NTkuOTM4NiwzMC4zMTQxJmNoZWNrSW5EYXRlPSR7ZGF0ZUFycn0mY2hlY2tPdXREYXRlPSR7ZGF0ZURlcH0mbWF4UHJpY2U9JHtOdW1iZXIobWF4UHJpY2UpfWApXG4gICAgICAgIC50aGVuKGRhdGE9PmRhdGEuanNvbigpKVxuICAgICAgICAudGhlbihkYXRhPT4ge1xuICAgICAgICAgICAgaWYgKGRhdGEubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiByZW5kZXJFbXB0eU9yRXJyb3JTZWFyY2hCbG9jaygn0KDQtdC30YPQu9GM0YLQsNGC0Ysg0L7RgtGB0YPRgtGB0YLQstGD0Y7RgicpXG4gICAgICAgICAgICByZW5kZXJTZWFyY2hSZXN1bHRzQmxvY2soZGF0YSlcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKCk9PntcbiAgICAgICAgICAgIGNvbnN0IGxpa2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZhdm9yaXRlcycpO1xuICAgICAgICAgICAgbGlrZXMuZm9yRWFjaChpdGVtPT57XG4gICAgICAgICAgICAgICAgaXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsKGUpPT57XG4gICAgICAgICAgICAgICAgICAgIHRvZ2dsZUZhdm9yaXRlSXRlbShlKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgY29uc3QgYm9va2luZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpLnJlc3VsdCcpO1xuICAgICAgICAgICAgYm9va2luZy5mb3JFYWNoKGk9PntcbiAgICAgICAgICAgICAgICBpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywoZSk9PntcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBmZXRjaChgaHR0cDovL2xvY2FsaG9zdDozMDMwL3BsYWNlcy8ke2UudGFyZ2V0LmlkfT9jaGVja0luRGF0ZT0ke2RhdGVBcnJ9JmNoZWNrT3V0RGF0ZT0ke2RhdGVEZXB9YClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGRhdGE9PmRhdGEuanNvbigpKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZGF0YT0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQobWFpblRpbWVvdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyVG9hc3Qoe3R5cGU6ICdzdWNjZXNzJywgdGV4dDogYNCe0YLQtdC70YwgJHtkYXRhLm5hbWV9INC30LDQsdGA0L7QvdC40YDQvtCy0LDQvSFgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZXJyPT5jb25zb2xlLmxvZyhlcnIpKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyID0+IHJlbmRlckVtcHR5T3JFcnJvclNlYXJjaEJsb2NrKGVycikpXG4gICAgY29uc3QgdGltZU91dCA9IHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgICAgIGZ1bmMoJ2Vycm9yJywnW10nKVxuICAgICAgICBjbGVhclRpbWVvdXQodGltZU91dCk7XG4gICAgfSwxMDAwKVxufVxuIl19